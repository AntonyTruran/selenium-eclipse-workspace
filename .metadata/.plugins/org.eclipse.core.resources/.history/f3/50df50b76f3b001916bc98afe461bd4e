package com.qa.excelTests;

import static org.junit.Assert.*;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Arrays;
import java.util.Collection;

import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.PageFactory;

import com.qa.excelReader.Constants;
import com.qa.excelReader.DemoSiteHome;
import com.qa.excelReader.DemoSiteLoginPage;
import com.qa.excelReader.DemoSiteRegisterPage;

@RunWith(Parameterized.class)
public class ExcelParameterTest {
	static Constants constant;
	private static FileInputStream file;
	private static XSSFWorkbook workbook;
	private static XSSFSheet sheet;
	private ChromeDriver driver;

	@Parameters
	public static Collection<Object[]> rowList() throws IOException {
		constant = new Constants();
		file = new FileInputStream(constant.getFileLocation());
		workbook = new XSSFWorkbook(file);
		sheet = workbook.getSheetAt(0);
		Object[][] excelCell = new Object[sheet.getPhysicalNumberOfRows() - 1][4];
		for (int rowNum = 1; rowNum < sheet.getPhysicalNumberOfRows(); rowNum++) {
			excelCell[rowNum - 1][0] = sheet.getRow(rowNum).getCell(0).getStringCellValue();
			excelCell[rowNum - 1][1] = sheet.getRow(rowNum).getCell(1).getStringCellValue();
			excelCell[rowNum - 1][2] = sheet.getRow(rowNum).getCell(2).getStringCellValue();
			excelCell[rowNum - 1][3] = rowNum;
		}
		workbook.close();
		return Arrays.asList(excelCell);
	}

	private String username;
	private String password;
	private String expectedLoginResult;
	private int rowNumber;

	public ExcelParameterTest(String username, String password, String expectedLoginResult, int rowNumber) {
		this.username = username;
		this.password = password;
		this.expectedLoginResult = expectedLoginResult;
		this.rowNumber = rowNumber;
	}

	@Before
	public void setup() {
		System.setProperty("webdriver.chrome.driver", constant.getDriverLocation());
		driver = new ChromeDriver();
		driver.manage().window().maximize();
		constant = new Constants();
	}

	@Test
	public void login() throws IOException {
		// selenium login attempt
		driver.get(constant.getWebpage());
		DemoSiteHome homePage = PageFactory.initElements(driver, DemoSiteHome.class);
		homePage.changeToNewUser();
		DemoSiteRegisterPage registerPage = PageFactory.initElements(driver, DemoSiteRegisterPage.class);
		registerPage.addNewUser(username, password);
		DemoSiteLoginPage loginPage = PageFactory.initElements(driver, DemoSiteLoginPage.class);
		String result = loginPage.loginNewUser(username, password);

		// Writing to excel
		file = new FileInputStream(constant.getFileLocation());
		workbook = new XSSFWorkbook(file);
		sheet = workbook.getSheetAt(0);

		XSSFRow row = sheet.getRow(rowNumber);
		XSSFCell cell;
		cell = row.getCell(3);
		if (cell == null) {
			cell = row.createCell(3);
		}
		cell.setCellValue(result);
		try {
			assertEquals("failed to log in", constant.getExpectedLoginResult(),
					loginPage.loginResult(username, password));
			cell = row.getCell(4);
			if (cell == null) {
				cell = row.createCell(3);
			}
			cell.setCellValue("PASS");
		} catch (AssertionError e) {
			cell = row.getCell(4);
			if (cell == null) {
				cell = row.createCell(3);
			}
			cell.setCellValue("FAIL");
		} finally {
			FileOutputStream output = new FileOutputStream(constant.getFileLocation());
			workbook.write(output);
			output.flush();
			output.close();
		}
		workbook.close();
		file.close();
		System.out.println(username + " " + password + " " + expectedLoginResult);
	}

	@After
	public void teardown() {
		driver.quit();
	}
}
